<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context   
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/tx      
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"  
	>
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.maven" /> 
	<!-- 导入资源文件 -->
<!-- 	<context:property-placeholder location="classpath:jdbc.properties"/> -->
    
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="root"></property>
		<property name="password" value="123456"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/hejun"></property>
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
	</bean>
	
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/maven/mapping/*.xml"></property>  
    </bean>  
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.maven.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />  -->
    
    <!-- activiti引擎配置 -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
    	<property name="processEngineName" value="spring"></property>
    	<property name="dataSource" ref="dataSource" />
    	<property name="transactionManager" ref="transactionManager" />
    	<property name="databaseSchemaUpdate" value="true" />
    	<property name="jobExecutorActivate" value="false" />
    	<property name="deploymentResources" value="classpath*:/diagrams/leave.bpmn"></property>
    </bean>
    
    <!-- Activiti引擎工厂 -->
	<bean id="processEngineFactory" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	
	<!-- Activiti的Service -->
	<bean id="repositoryService" factory-bean="processEngineFactory" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngineFactory" factory-method="getRuntimeService" />
	<bean id="formService" factory-bean="processEngineFactory" factory-method="getFormService" />
	<bean id="identityService" factory-bean="processEngineFactory" factory-method="getIdentityService" />
	<bean id="taskService" factory-bean="processEngineFactory" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngineFactory" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngineFactory" factory-method="getManagementService" />
    
</beans>
